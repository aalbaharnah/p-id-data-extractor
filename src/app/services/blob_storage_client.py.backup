# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.
from app.config import Config, config
from typing import Optional
from google.cloud import storage
from google.auth import default
from typing import Union
from logger_config import get_logger
import os


logger = get_logger(__name__)


class CloudStorageClient:
    _bucket: Optional[storage.Bucket] = None

    def __init__(self, config: Config = config, credentials=None):
        '''Initializes a new instance of the CloudStorageClient class.

        :param config: The configuration to use
        :type config: Config
        :param credentials: The Google Cloud credentials to use
        :type credentials: google.auth.credentials.Credentials
        '''
        self._config = config
        self._credentials = credentials or default()[0]

    def throw_if_not_initialized(self):
        '''Throws an exception if the cloud storage client is not initialized.'''
        if self._bucket is None:
            raise Exception('Cloud storage client is not initialized')

    def upload_bytes(self, blob_name: str, image_bytes: Union[bytes, str]):
        '''Uploads the given bytes to the Google Cloud Storage bucket.

        :param blob_name: The name of the blob to upload to
        :type blob_name: str
        :param image_bytes: The bytes to upload
        :type image_bytes: Union[bytes, str]
        '''
        logger.info(f'Uploading {blob_name} to Google Cloud Storage')

        self.throw_if_not_initialized()
        blob = self._bucket.blob(blob_name)
        
        if isinstance(image_bytes, str):
            image_bytes = image_bytes.encode('utf-8')
            
        blob.upload_from_string(image_bytes, retry=storage.retry.DEFAULT_RETRY)
        return blob

    def download_bytes(self, blob_name: str) -> bytes:
        '''Downloads the given blob from the blob storage account.

    def download_bytes(self, blob_name: str) -> bytes:
        '''Downloads the given blob from the Google Cloud Storage bucket.

        :param blob_name: The name of the blob to download
        :type blob_name: str
        :return: The bytes of the blob
        :rtype: bytes
        '''
        logger.info(f'Downloading {blob_name} from Google Cloud Storage')

        self.throw_if_not_initialized()
        blob = self._bucket.blob(blob_name)
        return blob.download_as_bytes(retry=storage.retry.DEFAULT_RETRY)

    def blob_exists(self, blob_name: str) -> bool:
        '''Checks if the given blob exists in the Google Cloud Storage bucket.

        :param blob_name: The name of the blob to check
        :type blob_name: str
        :return: True if the blob exists, False otherwise
        :rtype: bool
        '''
        logger.info(f'Checking if {blob_name} exists in Google Cloud Storage')

        self.throw_if_not_initialized()
        blob = self._bucket.blob(blob_name)
        return blob.exists()

    def init(self):
        '''Initializes the Google Cloud Storage client.'''
        # Set up project ID environment variable if provided
        if self._config.gcp_project_id:
            os.environ['GOOGLE_CLOUD_PROJECT'] = self._config.gcp_project_id
            
        storage_client = storage.Client(
            project=self._config.gcp_project_id,
            credentials=self._credentials
        )
        self._bucket = storage_client.bucket(self._config.gcs_bucket_name)


# Create a global instance with default Google Cloud credentials
cloud_storage_client = CloudStorageClient(config)

# For backward compatibility, keep the old name as an alias
blob_storage_client = cloud_storage_client
